#Introducing wurfl.js - a simple device detection repository

In this day and age we hear a lot about what is called responsive design. Designing responsive web pages is a skill that many are chasing and with the multitude of free tools available out there is becoming easier and easier.

But not so long ago web designers had to make use of User-Agent strings embedded in HTTP headers. Usually you only knew if the device used was an iPhone, Android or Desktop computer, nothing more. That was a tiring practice and thats why responsive design has become so popular. It enables developers to create a website that caters to every device and screen size out there, without having to deal with the dark corners of server side programming.

Nevertheless, there are instances when a developer may need to know what kind of device is accessing his website. That’s where WURFL comes in handy, it is an acronym for Wireless Universal Resource FiLe, or to explain it simply it is a growing list of recognized devices that provides developers with valuable information about the type of devices their clients are using to access their website.

#What is WURFL

The purpose behind WURFL is to enable developers to present content nicely and provide a better experience for the users, while at the same time giving developers insight about the users behaviors and usage patterns. It tries to do this in a fast, easy implementable and cost-free way.

Now let’s get our hands dirty, firstly you need to add this line of Javascript to your page:

<script type='text/javascript' src="//wurfl.io/wurfl.js"></script>

So essentially you just imported a JS file and that enables you to access the WURFL object in JavaScript, which looks like this:

{
  complete_device_name:"Google Nexus 4",
  form_factor:"Smartphone",
  is_mobile:true
}


I quickly set up an example page here: http://ddragoti.github.io/WURFL/ so you can see it in action. 

The source code is hosted on github and you can have a look at it here: https://github.com/ddragoti/WURFL/blob/gh-pages/index.html .
You probably noticed that there are only three properties there:

complete_device_name which gives you the make and model of the device accessing your website, but if it is a desktop device it will give you a generic “desktop computer” response.

form_factor which can be any of these:
desktop, app, tablet, smartphone, feature phone, other mobile etc.

is_mobile is a boolean function which can be either true or false depending on the device, if it is a mobile or tablet it will return true.

This enables you to do things like: 

if(!WURFL.is_mobile){

      $('#wurfl .is-mobile span').html("false");

}



#Advertising

WURFL can also help you in better targeting of ads, there are ads out there that look better on mobile devices and others that are more appropriate for desktops or laptops. WURFL can help you control how ads get displayed and in what kind of devices. Also being able to design how advertising gets displayed depending on screen sizes and the type of device is a pretty good feature by itself.
You can simply control the ads by using WURFL.is_mobile feature or if you want to have more control use the form_factor option and target ads depending on the type of device.

#WURFL and Modernizr

Even though what WURFL offers may seem somewhat similar to what can be done with Modernizr, it isn’t. They’re not even in the same category of services. Modernizr gives you information about the capabilities of the web browser, whereas WURFL provides insight about the hardware. And there are instances where knowing the device’s make and model  is better than knowing only the browser capabilities of the device because even though the browser may support a certain feature the actual device may not. 

Nevertheless, this doesn't mean that you should get rid of Modernizr altogether. 
On the contrary, using WURFL and Modernizr together will give you fine grained control over the way your websites work and look in any kind of device. 

A fine example is the CSS capabilities of Modernizr, where it allows you to use different styles depending on the device. This great feature is available on WURFL too and you need a single line of Javascript for it to work:

document.documentElement.className += ' ' + (WURFL.is_mobile ? '' : 'no-') + "mobile";

In this simple case, when a device is mobile the html tag will be assigned the “is_mobile” class, otherwise the class will be equal to “no-is_mobile”.
After this, you can create different style sheets depending on the class assigned. 


#Conclusion

For someone who knows how tricky it is to get information about the different devices accessing your service and have used Device Description Repositories that required server-side libraries before, WURFL is a great and simple service and at no cost whatsoever.

It can enable developers control over how their content gets presented on a multitude of devices, better targeting of advertising and better analytics over the way their users access their websites.








